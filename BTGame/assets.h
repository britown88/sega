/***********************************************************************
   WARNING: This file generated by robots.  Do not attempt to modify.

   This API is for use with assets.db
   Which contains 2 table(s).
***********************************************************************/

#pragma once

#include "segautils/Defs.h"
#include "segautils/String.h"

typedef struct sqlite3_stmt sqlite3_stmt;
typedef struct lua_State lua_State;
typedef struct DB_assets DB_assets;

DB_assets *db_assetsCreate();
void db_assetsDestroy(DB_assets *self);
int db_assetsCreateTables(DB_assets *self);

typedef struct {
   String *id;
   void *image;
   int imageSize;
} DBImage;

#define VectorTPart DBImage
#include "segautils/Vector_Decl.h"

void dbImageDestroy(DBImage *self); //this does not call free on self!!
int dbImageInsert(DB_assets *db, const DBImage *obj);
int dbImageUpdate(DB_assets *db, const DBImage *obj); //will base on primary key
vec(DBImage) *dbImageSelectAll(DB_assets *db);
DBImage dbImageSelectFirstByid(DB_assets *db, const char *id);
void dbImageDeleteAll(DB_assets *db);
void dbImageDeleteByid(DB_assets *db, const char *id);

typedef struct {
   String *id;
   void *palette;
   int paletteSize;
} DBPalette;

#define VectorTPart DBPalette
#include "segautils/Vector_Decl.h"

void dbPaletteDestroy(DBPalette *self); //this does not call free on self!!
int dbPaletteInsert(DB_assets *db, const DBPalette *obj);
int dbPaletteUpdate(DB_assets *db, const DBPalette *obj); //will base on primary key
vec(DBPalette) *dbPaletteSelectAll(DB_assets *db);
DBPalette dbPaletteSelectFirstByid(DB_assets *db, const char *id);
void dbPaletteDeleteAll(DB_assets *db);
void dbPaletteDeleteByid(DB_assets *db, const char *id);

