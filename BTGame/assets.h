/***********************************************************************
   WARNING: This file generated by robots.  Do not attempt to modify.

   This API is for use with assets.db
   Which contains 4 table(s).
***********************************************************************/

#pragma once

#include "segautils/Defs.h"
#include "segautils/String.h"

typedef struct sqlite3_stmt sqlite3_stmt;
typedef struct lua_State lua_State;
typedef struct DB_assets DB_assets;

DB_assets *db_assetsCreate();
void db_assetsDestroy(DB_assets *self);
int db_assetsCreateTables(DB_assets *self);

typedef struct {
   String *id;
   void *image;
   int imageSize;
} DBImage;

#define VectorTPart DBImage
#include "segautils/Vector_Decl.h"

void dbImageDestroy(DBImage *self); //this does not call free on self!!
int dbImageInsert(DB_assets *db, const DBImage *obj);
int dbImageUpdate(DB_assets *db, const DBImage *obj); //will base on primary key
vec(DBImage) *dbImageSelectAll(DB_assets *db);
DBImage dbImageSelectFirstByid(DB_assets *db, const char *id);
void dbImageDeleteAll(DB_assets *db);
void dbImageDeleteByid(DB_assets *db, const char *id);

typedef struct {
   String *id;
   void *palette;
   int paletteSize;
} DBPalette;

#define VectorTPart DBPalette
#include "segautils/Vector_Decl.h"

void dbPaletteDestroy(DBPalette *self); //this does not call free on self!!
int dbPaletteInsert(DB_assets *db, const DBPalette *obj);
int dbPaletteUpdate(DB_assets *db, const DBPalette *obj); //will base on primary key
vec(DBPalette) *dbPaletteSelectAll(DB_assets *db);
DBPalette dbPaletteSelectFirstByid(DB_assets *db, const char *id);
void dbPaletteDeleteAll(DB_assets *db);
void dbPaletteDeleteByid(DB_assets *db, const char *id);

typedef struct {
   String *id;
   int width;
   int height;
} DBSprite;

#define VectorTPart DBSprite
#include "segautils/Vector_Decl.h"

void dbSpriteDestroy(DBSprite *self); //this does not call free on self!!
int dbSpriteInsert(DB_assets *db, const DBSprite *obj);
int dbSpriteUpdate(DB_assets *db, const DBSprite *obj); //will base on primary key
vec(DBSprite) *dbSpriteSelectAll(DB_assets *db);
DBSprite dbSpriteSelectFirstByid(DB_assets *db, const char *id);
void dbSpriteDeleteAll(DB_assets *db);
void dbSpriteDeleteByid(DB_assets *db, const char *id);

typedef struct {
   int id;
   String *sprite;
   String *image;
   int index;
   int imgX;
   int imgY;
} DBFrame;

#define VectorTPart DBFrame
#include "segautils/Vector_Decl.h"

void dbFrameDestroy(DBFrame *self); //this does not call free on self!!
int dbFrameInsert(DB_assets *db, const DBFrame *obj);
int dbFrameUpdate(DB_assets *db, const DBFrame *obj); //will base on primary key
vec(DBFrame) *dbFrameSelectAll(DB_assets *db);
DBFrame dbFrameSelectFirstBysprite(DB_assets *db, const char *sprite);
vec(DBFrame) *dbFrameSelectBysprite(DB_assets *db, const char *sprite);
void dbFrameDeleteAll(DB_assets *db);
void dbFrameDeleteBysprite(DB_assets *db, const char *sprite);

