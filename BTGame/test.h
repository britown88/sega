/***********************************************************************
   WARNING: This file generated by robots.  Do not attempt to modify.

   This API is for use with test.db
   Which contains 2 table(s).
***********************************************************************/

#pragma once

#include "segautils/Defs.h"
#include "segautils/String.h"

typedef struct sqlite3_stmt sqlite3_stmt;
typedef struct lua_State lua_State;
typedef struct DB_test DB_test;

DB_test *db_testCreate();
void db_testDestroy(DB_test *self);
int db_testCreateTables(DB_test *self);

typedef struct {
   String *id;
   void *image;
   int imageSize;
   int foo;
} DBImage;

#define VectorTPart DBImage
#include "segautils/Vector_Decl.h"

void dbImageDestroy(DBImage *self); //this does not call free on self!!
int dbImageInsert(DB_test *db, const DBImage *obj);
vec(DBImage) *dbImageSelectAll(DB_test *db);
DBImage dbImageSelectFirstByid(DB_test *db, const char *id);
DBImage dbImageSelectFirstByfoo(DB_test *db, int foo);
vec(DBImage) *dbImageSelectByfoo(DB_test *db, int foo);
void dbImageDeleteAll(DB_test *db);
void dbImageDeleteByid(DB_test *db, const char *id);
void dbImageDeleteByfoo(DB_test *db, int foo);

typedef struct {
   String *id;
   void *palette;
   int paletteSize;
} DBPalette;

#define VectorTPart DBPalette
#include "segautils/Vector_Decl.h"

void dbPaletteDestroy(DBPalette *self); //this does not call free on self!!
int dbPaletteInsert(DB_test *db, const DBPalette *obj);
vec(DBPalette) *dbPaletteSelectAll(DB_test *db);
DBPalette dbPaletteSelectFirstByid(DB_test *db, const char *id);
void dbPaletteDeleteAll(DB_test *db);
void dbPaletteDeleteByid(DB_test *db, const char *id);

